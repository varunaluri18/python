#clousers

def parent():
    print('I am Parent')
    def child():
        print('I am Child')
        return 'hai'
    return child
a=parent()
x=a()    
print(x) 
_______________________________________________
#Decorators

def dec(var):
    def new():
        print("I am busy")
    return new
@dec
def act():
    print("Hi gd mng")
act()
_____________________________________________
def dec(var):
    def sub(x,y):
        return x-y
    return sub

@dec
def add(x,y):
    return x+y

print (add(3,2))
_____________________________________________
#Generators

def genereator(n):
    i=0
    while i<n:
        yield i
        i+=1
        if i>6:
            print('warning')    
output=genereator(10)
print(output)
for i in output:
    print(i)
---------------------------
Write a generator function to generate a Fibonacci series?

Solution:

def fibo(Num):
    a, b = 0, 1
        for I in xrange(Num):
        yield a,
        a, b = b, a+b
Num = input(‘Enter a number:’)
for i in fibo(Num):
        print i   
